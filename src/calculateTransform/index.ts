import type { Mat4 } from "../Mat4";

/**
 * Calculates a world transformation matrix matching that which would be generated by Blender in XYZ Euler mode.
 * @param locationX The location of the object on the X axis.
 * @param locationY The location of the object on the Y axis.
 * @param locationZ The location of the object on the Z axis.
 * @param rotationX The rotation of the object around the X axis, in radians.
 * @param rotationY The rotation of the object around the Y axis, in radians.
 * @param rotationZ The rotation of the object around the Z axis, in radians.
 * @param scaleX The scale of the object on the X axis, as a multiplying factor.
 * @param scaleY The scale of the object on the Y axis, as a multiplying factor.
 * @param scaleZ The scale of the object on the Z axis, as a multiplying factor.
 * @param mat4 The matrix to which to write the result.
 */
export function calculateTransform(
  locationX: number,
  locationY: number,
  locationZ: number,
  rotationX: number,
  rotationY: number,
  rotationZ: number,
  scaleX: number,
  scaleY: number,
  scaleZ: number,
  mat4: Mat4
): void {
  const sinX = Math.sin(rotationX);
  const cosX = Math.cos(rotationX);

  const a0 = scaleY * cosX;
  const a1 = -scaleZ * sinX;
  const a2 = scaleY * sinX;
  const a3 = scaleZ * cosX;

  const sinY = Math.sin(rotationY);
  const cosY = Math.cos(rotationY);

  const b0 = scaleX * cosY;
  const b1 = a2 * sinY;
  const b2 = a3 * sinY;

  const sinZ = Math.sin(rotationZ);
  const cosZ = Math.cos(rotationZ);

  mat4[0] = b0 * cosZ;
  mat4[1] = b1 * cosZ - a0 * sinZ;
  mat4[2] = b2 * cosZ - a1 * sinZ;
  mat4[3] = locationX;
  mat4[4] = b0 * sinZ;
  mat4[5] = a0 * cosZ + b1 * sinZ;
  mat4[6] = a1 * cosZ + b2 * sinZ;
  mat4[7] = locationY;
  mat4[8] = -scaleX * sinY;
  mat4[9] = a2 * cosY;
  mat4[10] = a3 * cosY;
  mat4[11] = locationZ;
  mat4[12] = 0;
  mat4[13] = 0;
  mat4[14] = 0;
  mat4[15] = 1;
}
