import { combineMatrices, Mat4 } from "../..";

describe(`combineMatrices`, () => {
  describe(`when all matrices are distinct`, () => {
    let a: Mat4;
    let b: Mat4;
    let output: Mat4;

    beforeAll(() => {
      a = [
        1.3735369443893433, -2.974452495574951, 1.6522530317306519,
        -0.0720856785774231, 1.322471261024475, 6.1243109703063965,
        -0.5224795341491699, -0.7749859094619751, 0.8836144804954529,
        -4.5423712730407715, -1.7863743305206299, -0.9022345542907715, 0.0, 0.0,
        0.0, 1.0,
      ];

      b = [
        -0.01299344003200531, 0.12425273656845093, 0.8930259346961975,
        2.3591322898864746, -0.06693699955940247, 0.18830831348896027,
        -0.023741465061903, 0.44092345237731934, -0.19957560300827026,
        -0.6888105869293213, 0.0446627140045166, -1.4445509910583496, 0.0, 0.0,
        0.0, 1.0,
      ];

      output = [
        -40.05, -38.0, 81.23, 53.29, -34.88, -11.04, -89.47, 81.99, 74.0, 73.12,
        38.69, -99.93, 10.87, 26.05, -89.82, 14.7,
      ];

      combineMatrices(a, b, output);
    });

    it(`does not modify a`, () => {
      expect(a).toEqual([
        1.3735369443893433, -2.974452495574951, 1.6522530317306519,
        -0.0720856785774231, 1.322471261024475, 6.1243109703063965,
        -0.5224795341491699, -0.7749859094619751, 0.8836144804954529,
        -4.5423712730407715, -1.7863743305206299, -0.9022345542907715, 0.0, 0.0,
        0.0, 1.0,
      ]);
    });

    it(`does not modify b`, () => {
      expect(b).toEqual([
        -0.01299344003200531, 0.12425273656845093, 0.8930259346961975,
        2.3591322898864746, -0.06693699955940247, 0.18830831348896027,
        -0.023741465061903, 0.44092345237731934, -0.19957560300827026,
        -0.6888105869293213, 0.0446627140045166, -1.4445509910583496, 0.0, 0.0,
        0.0, 1.0,
      ]);
    });

    it(`writes the expected matrix to the output`, () => {
      expect(output[0]).toBeCloseTo(-0.14849545061588287);
      expect(output[1]).toBeCloseTo(-1.5275377035140991);
      expect(output[2]).toBeCloseTo(1.371016025543213);
      expect(output[3]).toBeCloseTo(-0.5300000309944153);
      expect(output[4]).toBeCloseTo(-0.3228522539138794);
      expect(output[5]).toBeCloseTo(1.6774687767028809);
      expect(output[6]).toBeCloseTo(1.012265682220459);
      expect(output[7]).toBeCloseTo(5.799999713897705);
      expect(output[8]).toBeCloseTo(0.6490882635116577);
      expect(output[9]).toBeCloseTo(0.48489871621131897);
      expect(output[10]).toBeCloseTo(0.8171489834785461);
      expect(output[11]).toBeCloseTo(1.7599998712539673);
      expect(output[12]).toBeCloseTo(0.0);
      expect(output[13]).toBeCloseTo(0.0);
      expect(output[14]).toBeCloseTo(0.0);
      expect(output[15]).toBeCloseTo(1.0);
    });
  });

  describe(`when a is also the output`, () => {
    let a: Mat4;
    let b: Mat4;

    beforeAll(() => {
      a = [
        1.3735369443893433, -2.974452495574951, 1.6522530317306519,
        -0.0720856785774231, 1.322471261024475, 6.1243109703063965,
        -0.5224795341491699, -0.7749859094619751, 0.8836144804954529,
        -4.5423712730407715, -1.7863743305206299, -0.9022345542907715, 0.0, 0.0,
        0.0, 1.0,
      ];

      b = [
        -0.01299344003200531, 0.12425273656845093, 0.8930259346961975,
        2.3591322898864746, -0.06693699955940247, 0.18830831348896027,
        -0.023741465061903, 0.44092345237731934, -0.19957560300827026,
        -0.6888105869293213, 0.0446627140045166, -1.4445509910583496, 0.0, 0.0,
        0.0, 1.0,
      ];

      combineMatrices(a, b, a);
    });

    it(`does not modify b`, () => {
      expect(b).toEqual([
        -0.01299344003200531, 0.12425273656845093, 0.8930259346961975,
        2.3591322898864746, -0.06693699955940247, 0.18830831348896027,
        -0.023741465061903, 0.44092345237731934, -0.19957560300827026,
        -0.6888105869293213, 0.0446627140045166, -1.4445509910583496, 0.0, 0.0,
        0.0, 1.0,
      ]);
    });

    it(`writes the expected matrix to the output`, () => {
      expect(a[0]).toBeCloseTo(-0.14849545061588287);
      expect(a[1]).toBeCloseTo(-1.5275377035140991);
      expect(a[2]).toBeCloseTo(1.371016025543213);
      expect(a[3]).toBeCloseTo(-0.5300000309944153);
      expect(a[4]).toBeCloseTo(-0.3228522539138794);
      expect(a[5]).toBeCloseTo(1.6774687767028809);
      expect(a[6]).toBeCloseTo(1.012265682220459);
      expect(a[7]).toBeCloseTo(5.799999713897705);
      expect(a[8]).toBeCloseTo(0.6490882635116577);
      expect(a[9]).toBeCloseTo(0.48489871621131897);
      expect(a[10]).toBeCloseTo(0.8171489834785461);
      expect(a[11]).toBeCloseTo(1.7599998712539673);
      expect(a[12]).toBeCloseTo(0.0);
      expect(a[13]).toBeCloseTo(0.0);
      expect(a[14]).toBeCloseTo(0.0);
      expect(a[15]).toBeCloseTo(1.0);
    });
  });

  describe(`when b is also the output`, () => {
    let a: Mat4;
    let b: Mat4;

    beforeAll(() => {
      a = [
        1.3735369443893433, -2.974452495574951, 1.6522530317306519,
        -0.0720856785774231, 1.322471261024475, 6.1243109703063965,
        -0.5224795341491699, -0.7749859094619751, 0.8836144804954529,
        -4.5423712730407715, -1.7863743305206299, -0.9022345542907715, 0.0, 0.0,
        0.0, 1.0,
      ];

      b = [
        -0.01299344003200531, 0.12425273656845093, 0.8930259346961975,
        2.3591322898864746, -0.06693699955940247, 0.18830831348896027,
        -0.023741465061903, 0.44092345237731934, -0.19957560300827026,
        -0.6888105869293213, 0.0446627140045166, -1.4445509910583496, 0.0, 0.0,
        0.0, 1.0,
      ];

      combineMatrices(a, b, b);
    });

    it(`does not modify a`, () => {
      expect(a).toEqual([
        1.3735369443893433, -2.974452495574951, 1.6522530317306519,
        -0.0720856785774231, 1.322471261024475, 6.1243109703063965,
        -0.5224795341491699, -0.7749859094619751, 0.8836144804954529,
        -4.5423712730407715, -1.7863743305206299, -0.9022345542907715, 0.0, 0.0,
        0.0, 1.0,
      ]);
    });

    it(`writes the expected matrix to the output`, () => {
      expect(b[0]).toBeCloseTo(-0.14849545061588287);
      expect(b[1]).toBeCloseTo(-1.5275377035140991);
      expect(b[2]).toBeCloseTo(1.371016025543213);
      expect(b[3]).toBeCloseTo(-0.5300000309944153);
      expect(b[4]).toBeCloseTo(-0.3228522539138794);
      expect(b[5]).toBeCloseTo(1.6774687767028809);
      expect(b[6]).toBeCloseTo(1.012265682220459);
      expect(b[7]).toBeCloseTo(5.799999713897705);
      expect(b[8]).toBeCloseTo(0.6490882635116577);
      expect(b[9]).toBeCloseTo(0.48489871621131897);
      expect(b[10]).toBeCloseTo(0.8171489834785461);
      expect(b[11]).toBeCloseTo(1.7599998712539673);
      expect(b[12]).toBeCloseTo(0.0);
      expect(b[13]).toBeCloseTo(0.0);
      expect(b[14]).toBeCloseTo(0.0);
      expect(b[15]).toBeCloseTo(1.0);
    });
  });
});
